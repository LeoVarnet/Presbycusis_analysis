install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
pkgbuild::has_build_tools(debug = TRUE)
pkgbuild::has_build_tools(debug = TRUE)
library("rstan")
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
Sys.setenv(LOCAL_CPPFLAGS = '-march=corei7')
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
fit <- stan(file = '8schools.stan', data = schools_dat)
install.packages(c('devtools','coda','mvtnorm'))
library(devtools)
install_github("rmcelreath/rethinking")
install.packages(c('coda','mvtnorm'))
options(repos=c(getOption('repos'),rethinking='http://xcelab.net/R'))
install.packages('rethinking',type='source')
library(rethinking)
# Setup -------------------------------------------------------------------
library(ggplot2)
library(ggExtra)
library(rstan)
library(shinystan)
#library(tidyverse)
library(cowplot)
library(dagitty)
rm(list=ls())
setwd("C:/Users/LÃ©o/ownCloud/Professionnel/Projet Genopath/011_Presbyacousie_Lorenzi/R_analyses/Presbycusis_analysis")
theme_set(theme_bw())
heardata = read.table('mat_full.txt')
colnames(heardata) <- c("group", "age", "PTA", "subject", "center", "gender", "NC_silence", "NC_noise")
Ntrials = max(heardata$NC_silence); # 48 trials per condition
Ncenter = max((heardata$center)); # 7 centers
heardata$group = factor(heardata$group)
heardata$subject = factor(heardata$subject)
heardata$PTA = as.numeric(heardata$PTA)
heardata$age = as.numeric(heardata$age)
heardata$center = factor(heardata$center)
heardata$gender = factor(heardata$gender)
heardata$NC_silence = as.numeric(heardata$NC_silence)
heardata$NC_noise = as.numeric(heardata$NC_noise)
heardata$PC_silence = 100*heardata$NC_silence/Ntrials
heardata$PC_noise = 100*heardata$NC_noise/Ntrials
heardata$lPC_silence <- qlogis(heardata$PC_silence/100)
heardata$lPC_noise <- qlogis(heardata$PC_noise/100)
min_age = min(heardata$age) # subjects 42- to 92-yo
max_age = max(heardata$age)
levels(heardata$group)[levels(heardata$group)=="0"] <- "NH"
levels(heardata$group)[levels(heardata$group)=="1"] <- "HI"
levels(heardata$gender)[levels(heardata$gender)=="1"] <- "Man"
levels(heardata$gender)[levels(heardata$gender)=="2"] <- "Woman"
levels(heardata$center)[levels(heardata$center)=="1"] <- "Marseille"
levels(heardata$center)[levels(heardata$center)=="2"] <- "Lille"
levels(heardata$center)[levels(heardata$center)=="3"] <- "Paris"
levels(heardata$center)[levels(heardata$center)=="4"] <- "Clermont"
levels(heardata$center)[levels(heardata$center)=="5"] <- "Lyon"
levels(heardata$center)[levels(heardata$center)=="6"] <- "Bordeaux"
levels(heardata$center)[levels(heardata$center)=="7"] <- "Toulouse"
# transform continuous variable age into a 3-level factor for representation purpose
heardata$agefactor <- cut.default(heardata$age, seq(from=min_age-1,to=max_age+1,length.out=4))
heardata2 <- data.frame(  unlist(list(heardata$group,heardata$group)),
c(heardata$age,heardata$age),
c(heardata$PTA,heardata$PTA),
unlist(list(heardata$subject,heardata$subject)),
unlist(list(heardata$center,heardata$center)),
unlist(list(heardata$gender,heardata$gender)),
c(heardata$NC_silence,heardata$NC_noise),
c(heardata$PC_silence,heardata$PC_noise),
c(rep(1,length(heardata$NC_silence)),rep(2,length(heardata$NC_noise))))
colnames(heardata2) <- c("group", "age", "PTA", "subject", "center", "gender", "NC", "PC", 'condition')
heardata2$condition <- factor(heardata2$condition)
levels(heardata2$condition)[levels(heardata2$condition)=="1"] <- "Silence"
levels(heardata2$condition)[levels(heardata2$condition)=="2"] <- "Noise"
heardata2$agefactor <- cut.default(heardata2$age, seq(from=min_age-1,to=max_age+1,length.out=4))
heardata2$lPC <- qlogis(heardata2$PC/100)
# Zscored data and counterfactual predictors
PTA_pred = seq(from = 0, to = 70, by = 7)
NPTApred = length(PTA_pred)
heardata$PTAz = (heardata$PTA-mean(heardata$PTA))/sd(heardata$PTA)
heardata2$PTAz = (heardata2$PTA-mean(heardata2$PTA))/sd(heardata2$PTA)
PTAz_pred = (PTA_pred-mean(heardata2$PTA))/sd(heardata2$PTA)
age_pred = seq(from = 40, to = 100, by = 6)
Nagepred = length(age_pred)
heardata$agez = (heardata$age-mean(heardata$age))/sd(heardata$age)
heardata2$agez = (heardata2$age-mean(heardata2$age))/sd(heardata2$age)
agez_pred = (age_pred-mean(heardata2$age))/sd(heardata2$age)
group_pred = c(0,1)
cond_pred = c(0,1)
# Data as a list for feeding Rstan models
data <- list( agez = heardata$agez[heardata$group=="HI"],
PTAz = heardata$PTAz[heardata$group=="HI"],
agez = heardata$agez[heardata$group=="HI"],
gender = as.numeric(heardata$gender[heardata$group=="HI"])-1,
N = length(heardata$PTAz[heardata$group=="HI"]),
NCs = heardata$NC_silence[heardata$group=="HI"],
NCn = heardata$NC_noise[heardata$group=="HI"],
N_NH = length(heardata$NC_noise[heardata$group=="NH"]),
NCn_NH = heardata$NC_noise[heardata$group=="NH"],
center = as.numeric(heardata$center[heardata$group=="HI"]),
Ntrials = Ntrials,
Ncenter = Ncenter,
prior_only = 0)
e
m
m1.1 <- stan_model(file = 'm1.1.stan')
fit.m1.1 <- sampling(m1.1,
data = data,
chains = 4,             # number of Markov chains
warmup = 3000,          # number of warmup iterations per chain
iter = 7000,            # total number of iterations per chain
refresh = 1000)
(
parameters = c("beta_PTA","beta_age","beta_cond","beta_gender")#,"beta_condPTA","beta_agePTA","beta_agecond","beta_agecondPTA","plapse")#c("beta_0","beta_PTA","beta_age","beta_cond","beta_condPTA","beta_agePTA","beta_agecond","beta_agecondPTA")
)
parameters = c("beta_PTA","beta_age","beta_cond","beta_gender")#,"beta_condPTA","beta_agePTA","beta_agecond","beta_agecondPTA","plapse")#c("beta_0","beta_PTA","beta_age","beta_cond","beta_condPTA","beta_agePTA","beta_agecond","beta_agecondPTA")
print(fit.m1.1, pars = parameters)
parsfit<-extract(fit.m1.1,pars=rev(fit.m1.1@model_pars))#c("beta_0","beta_PTA","beta_age","beta_cond","beta_condPTA","beta_agePTA","beta_agecond","beta_agecondPTA","gamma_0","gamma_PTA","gamma_age","gamma_cond","gamma_condPTA","gamma_agePTA","gamma_agecond","gamma_agecondPTA"))
Nsamples = length(parsfit$beta_0)
heardata_pred <- data.frame(
PTA_pred,
PTAz_pred,
rep(age_pred, each=NPTApred),
rep(agez_pred, each=NPTApred),
c(rep(1,NPTApred*Nagepred),rep(2,NPTApred*Nagepred),rep(3,NPTApred*Nagepred),rep(4,NPTApred*Nagepred),rep(5,NPTApred*Nagepred),rep(6,NPTApred*Nagepred),rep(7,NPTApred*Nagepred)))
Ntotalpred = dim(heardata_pred)[1]
colnames(heardata_pred) <- c("PTA","PTAz","age", "agez","center")
heardata_pred$agefactor <- cut.default(heardata_pred$age, seq(from=min_age-1,to=max_age+1,length.out=4))
ps_pred = matrix(nrow = Nsamples, ncol = Ntotalpred)
ps_pred_center = matrix(nrow = Nsamples, ncol = Ntotalpred)
pn_pred = matrix(nrow = Nsamples, ncol = Ntotalpred)
pn_pred_center = matrix(nrow = Nsamples, ncol = Ntotalpred)
logit_ps_pred = matrix(nrow = Nsamples, ncol = Ntotalpred)
logit_ps_pred_center = matrix(nrow = Nsamples, ncol = Ntotalpred)
logit_pn_pred = matrix(nrow = Nsamples, ncol = Ntotalpred)
logit_pn_pred_center = matrix(nrow = Nsamples, ncol = Ntotalpred)
mean(parsfit$plapse)
logit_pn_pred[,i] = parsfit$beta_0[] +
parsfit$beta_cond[] +
parsfit$beta_age[]*heardata_pred$agez[i] +
parsfit$beta_PTA[]*heardata_pred$PTAz[i]
{logit_ps_pred[,i] = parsfit$beta_0[] +
parsfit$beta_age[]*heardata_pred$agez[i] +
parsfit$beta_PTA[]*heardata_pred$PTAz[i]
ps_pred[,i] = 1/16+(1-1/16)*gtools::inv.logit(logit_ps_pred[,i])
logit_pn_pred[,i] = parsfit$beta_0[] +
parsfit$beta_cond[] +
parsfit$beta_age[]*heardata_pred$agez[i] +
parsfit$beta_PTA[]*heardata_pred$PTAz[i]
pn_pred[,i] = 1/16+(1-parsfit$plapse[]-1/16)*gtools::inv.logit(logit_pn_pred[,i])}
for (i in 1:Ntotalpred)
{logit_ps_pred[,i] = parsfit$beta_0[] +
parsfit$beta_age[]*heardata_pred$agez[i] +
parsfit$beta_PTA[]*heardata_pred$PTAz[i]
ps_pred[,i] = 1/16+(1-1/16)*gtools::inv.logit(logit_ps_pred[,i])
logit_pn_pred[,i] = parsfit$beta_0[] +
parsfit$beta_cond[] +
parsfit$beta_age[]*heardata_pred$agez[i] +
parsfit$beta_PTA[]*heardata_pred$PTAz[i]
pn_pred[,i] = 1/16+(1-parsfit$plapse[]-1/16)*gtools::inv.logit(logit_pn_pred[,i])}
heardata_pred$agefactor <- cut.default(heardata_pred$age, seq(from=min_age-1,to=max_age+1,length.out=4))
heardata_pred_center = heardata_pred
heardata_pred_center$PC_silence<-t(apply(100*ps_pred_center[],2,quantile,probs=c(0.025,0.5,0.975),na.rm = TRUE)) #the median line with 95% credible intervals
colnames(heardata_pred_center$PC_silence)<-c("PC_silence_Cinf","PC_silence_med","PC_silence_Csup")
heardata_pred$PC_silence<-t(apply(100*ps_pred[],2,quantile,probs=c(0.025,0.5,0.975),na.rm = TRUE)) #the median line with 95% credible intervals
colnames(heardata_pred$PC_silence)<-c("PC_silence_Cinf","PC_silence_med","PC_silence_Csup")
heardata_pred_center$PC_noise<-t(apply(100*pn_pred_center[],2,quantile,probs=c(0.025,0.5,0.975),na.rm = TRUE)) #the median line with 95% credible intervals
colnames(heardata_pred_center$PC_noise)<-c("PC_noise_Cinf","PC_noise_med","PC_noise_Csup")
heardata_pred$PC_noise<-t(apply(100*pn_pred[],2,quantile,probs=c(0.025,0.5,0.975),na.rm = TRUE)) #the median line with 95% credible intervals
colnames(heardata_pred$PC_noise)<-c("PC_noise_Cinf","PC_noise_med","PC_noise_Csup")
p3.1c <- ggplot(data = subset(heardata,group=="HI")) +
geom_point(aes(x=PTA, y=PC_silence, color=center)) +
geom_point(aes(x=PTA, y=PC_noise, color=center), shape=1) +
#geom_segment(aes(x=PTA, xend=PTA, y=lPC_noise, yend=lPC_silence, color=center)) +
#scale_size(name = "N")+
ylab('PC')+
scale_size_area(max_size = 2,name = "N",n.breaks = 5) +
facet_grid(center~agefactor)+
theme(legend.position = "none")
p3.1c
p3.0a <- ggplot(data = subset(heardata, group=="HI"),aes(x=PC_silence, y=PC_noise, color=center)) +
geom_point() +
scale_size_area(max_size = 2,name = "N",n.breaks = 5) +
geom_abline(intercept = 0, slope = 1,linetype="dashed", color = "black")+
xlim(0, 100) + ylim(0, 100)
p3.0a
p3.0b <- ggplot(data = subset(heardata, group=="HI"),aes(x=lPC_silence, y=lPC_noise, color=center)) +
geom_count() +
scale_size_area(max_size = 2,name = "N",n.breaks = 5) +
geom_abline(intercept = 0, slope = 1,linetype="dashed", color = "black")
p3.0b
p3.1a <- ggplot(data = subset(heardata,group=="HI")) +
geom_point(aes(x=PTA, y=lPC_silence, color=center)) +
geom_point(aes(x=PTA, y=lPC_noise, color=center), shape=1) +
#geom_segment(aes(x=PTA, xend=PTA, y=lPC_noise, yend=lPC_silence, color=center)) +
#scale_size(name = "N")+
ylab('logit(PC)')+
scale_size_area(max_size = 2,name = "N",n.breaks = 5) +
facet_grid(~agefactor)
p3.1a
heardata_pred$agefactor <- cut.default(heardata_pred$age, seq(from=min_age-1,to=max_age+1,length.out=4))
heardata_pred$PC_silence<-t(apply(100*ps_pred[],2,quantile,probs=c(0.025,0.5,0.975),na.rm = TRUE)) #the median line with 95% credible intervals
colnames(heardata_pred$PC_silence)<-c("PC_silence_Cinf","PC_silence_med","PC_silence_Csup")
p3.1a +
geom_line(data=aggregate(.~agefactor*PTA,heardata_pred,mean),aes(x=PTA, y=PC_silence_med), inherit.aes = FALSE, color='#F8766D', 'size'=1)+
geom_line(data=aggregate(.~agefactor*PTA,heardata_pred,mean),aes(x=PTA, y=PC_noise_med), inherit.aes = FALSE, color='#F8766D', 'size'=1, linetype='longdash')+
ylim(0, 100)
p3.1b <- ggplot(data = subset(heardata,group=="HI")) +
geom_point(aes(x=PTA, y=PC_silence, color=center)) +
geom_point(aes(x=PTA, y=PC_noise, color=center), shape=1) +
#geom_segment(aes(x=PTA, xend=PTA, y=lPC_noise, yend=lPC_silence, color=center)) +
#scale_size(name = "N")+
ylab('PC')+
scale_size_area(max_size = 2,name = "N",n.breaks = 5) +
facet_grid(~agefactor)
p3.1b
p3.1b +
geom_line(data=aggregate(.~agefactor*PTA,heardata_pred,mean),aes(x=PTA, y=PC_silence_med), inherit.aes = FALSE, color='black', 'size'=1)+
geom_line(data=aggregate(.~agefactor*PTA,heardata_pred,mean),aes(x=PTA, y=PC_noise_med), inherit.aes = FALSE, color='black', 'size'=1, linetype='longdash')+
ylim(0, 100)
rstan:::rstudio_stanc("m1.1.stan")
rstan:::rstudio_stanc("m1.1h.stan")
rstan:::rstudio_stanc("m1.1h.stan")
rstan:::rstudio_stanc("m1.1h.stan")
rstan:::rstudio_stanc("m1.1h.stan")
rstan:::rstudio_stanc("m1.1h.stan")
rstan:::rstudio_stanc("m1.1h.stan")
rstan:::rstudio_stanc("m1.1h.stan")
m1.1h <- stan_model(file = 'm1.1h.stan')
fit.m1.1 <- sampling(m1.1,
data = data,
chains = 4,             # number of Markov chains
warmup = 3000,          # number of warmup iterations per chain
iter = 7000,            # total number of iterations per chain
refresh = 1000)
parameters = c("beta_PTA","beta_age","beta_cond","beta_gender")#,"beta_condPTA","beta_agePTA","beta_agecond","beta_agecondPTA","plapse")#c("beta_0","beta_PTA","beta_age","beta_cond","beta_condPTA","beta_agePTA","beta_agecond","beta_agecondPTA")
print(fit.m1.1, pars = parameters)
fit.m1.1 <- sampling(m1.1h,
data = data,
chains = 4,             # number of Markov chains
warmup = 3000,          # number of warmup iterations per chain
iter = 7000,            # total number of iterations per chain
refresh = 1000)
rstan:::rstudio_stanc("m1.1h.stan")
rstan:::rstudio_stanc("m1.1h.stan")
m1.1h <- stan_model(file = 'm1.1h.stan')
fit.m1.1 <- sampling(m1.1h,
data = data,
chains = 4,             # number of Markov chains
warmup = 3000,          # number of warmup iterations per chain
iter = 7000,            # total number of iterations per chain
refresh = 1000)
rstan:::rstudio_stanc("m1.1hi.stan")
rstan:::rstudio_stanc("m1.1hi.stan")
m1.1hi <- stan_model(file = 'm1.1hi.stan')
fit.m1.1 <- sampling(m1.1hi,
data = data,
chains = 4,             # number of Markov chains
warmup = 3000,          # number of warmup iterations per chain
iter = 7000,            # total number of iterations per chain
refresh = 1000)
rstan:::rstudio_stanc("m1.1hi.stan")
parameters = c("beta_PTA","beta_age","beta_cond","beta_gender")#,"beta_condPTA","beta_agePTA","beta_agecond","beta_agecondPTA","plapse")#c("beta_0","beta_PTA","beta_age","beta_cond","beta_condPTA","beta_agePTA","beta_agecond","beta_agecondPTA")
print(fit.m1.1, pars = parameters)
parsfit<-extract(fit.m1.1,pars=rev(fit.m1.1@model_pars))#c("beta_0","beta_PTA","beta_age","beta_cond","beta_condPTA","beta_agePTA","beta_agecond","beta_agecondPTA","gamma_0","gamma_PTA","gamma_age","gamma_cond","gamma_condPTA","gamma_agePTA","gamma_agecond","gamma_agecondPTA"))
Nsamples = length(parsfit$beta_0)
heardata_pred <- data.frame(
PTA_pred,
PTAz_pred,
rep(age_pred, each=NPTApred),
rep(agez_pred, each=NPTApred),
c(rep(1,NPTApred*Nagepred),rep(2,NPTApred*Nagepred),rep(3,NPTApred*Nagepred),rep(4,NPTApred*Nagepred),rep(5,NPTApred*Nagepred),rep(6,NPTApred*Nagepred),rep(7,NPTApred*Nagepred)))
Ntotalpred = dim(heardata_pred)[1]
colnames(heardata_pred) <- c("PTA","PTAz","age", "agez","center")
heardata_pred$agefactor <- cut.default(heardata_pred$age, seq(from=min_age-1,to=max_age+1,length.out=4))
ps_pred = matrix(nrow = Nsamples, ncol = Ntotalpred)
ps_pred_center = matrix(nrow = Nsamples, ncol = Ntotalpred)
pn_pred = matrix(nrow = Nsamples, ncol = Ntotalpred)
pn_pred_center = matrix(nrow = Nsamples, ncol = Ntotalpred)
logit_ps_pred = matrix(nrow = Nsamples, ncol = Ntotalpred)
logit_ps_pred_center = matrix(nrow = Nsamples, ncol = Ntotalpred)
logit_pn_pred = matrix(nrow = Nsamples, ncol = Ntotalpred)
logit_pn_pred_center = matrix(nrow = Nsamples, ncol = Ntotalpred)
for (i in 1:Ntotalpred)
)
parsfit$plapse
?mean
